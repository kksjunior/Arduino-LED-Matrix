



byte X1[] = {
B00000000,
B00000000,
B00000000,
B00000000,
B00000000,
B00000000,
B00000000,
B00000000};

byte X2[] = {
B11000000,
B00000000,
B00000000,
B00000000,
B00000000,
B00000000,
B00000000,
B00000000};

byte X3[] = {
B11000000,
B11000000,
B00000000,
B00000000,
B00000000,
B00000000,
B00000000,
B00000000};

byte X4[] = {
B11000000,
B11000000,
B11000000,
B00000000,
B00000000,
B00000000,
B00000000,
B00000000};

byte X5[] = {
B11000000,
B11000000,
B11000000,
B11000000,
B00000000,
B00000000,
B00000000,
B00000000};

byte X6[] = {
B11000000,
B11000000,
B11000000,
B11000000,
B11000000,
B00000000,
B00000000,
B00000000};

byte X7[] = {
B11000000,
B11000000,
B11000000,
B11000000,
B11000000,
B11000000,
B00000000,
B00000000};

byte X8[] = {
B11000000,
B11000000,
B11000000,
B11000000,
B11000000,
B11000000,
B11000000,
B00000000};

byte X9[] = {
B11000000,
B11000000,
B11000000,
B11000000,
B11000000,
B11000000,
B11000000,
B11000000};

byte X10[] = {
B11000000,
B11000000,
B11000000,
B11000000,
B11000000,
B11000000,
B11100000,
B11000000};

byte X11[] = {
B11000000,
B11000000,
B11000000,
B11000000,
B11000000,
B11110000,
B11100000,
B11000000};

byte X12[] = {
B11000000,
B11000000,
B11000000,
B11000000,
B11011000,
B11110000,
B11100000,
B11000000};

byte X13[] = {
B11000000,
B11000000,
B11000000,
B11000000,
B11011000,
B11111100,
B11100000,
B11000000};

byte X14[] = {
B11000000,
B11000000,
B11000000,
B11000000,
B11011000,
B11111100,
B11100100,
B11000000};

byte X15[] = {
B11000000,
B11000000,
B11000000,
B11000000,
B11011000,
B11111100,
B11100100,
B11000011};

byte X16[] = {
B11000000,
B11000000,
B11000000,
B11000000,
B11011000,
B11111100,
B11100111,
B11000011};

byte X17[] = {
B11000000,
B11000000,
B11000000,
B11000000,
B11011000,
B11111111,
B11100111,
B11000011};

byte X18[] = {
B11000000,
B11000000,
B11000000,
B11000000,
B11011011,
B11111111,
B11100111,
B11000011};

byte X19[] = {
B11000000,
B11000000,
B11000000,
B11000011,
B11011011,
B11111111,
B11100111,
B11000011};

byte X20[] = {
B11000000,
B11000000,
B11000011,
B11000011,
B11011011,
B11111111,
B11100111,
B11000011};

byte X21[] = {
B11000000,
B11000011,
B11000011,
B11000011,
B11011011,
B11111111,
B11100111,
B11000011};

byte F1[] = {
B11000011,
B11000011,
B11000011,
B11000011,
B11011011,
B11111111,
B11100111,
B11000011};

byte F2[] = {
B10000110,
B10000110,
B10000110,
B10000110,
B10110110,
B11111110,
B11001110,
B10000110};

byte F3[] = {
B00001100,
B00001100,
B00001100,
B00001100,
B01101100,
B11111100,
B10011100,
B00001100};


byte F4[] = {
B00011000,
B00011000,
B00011000,
B00011000,
B11011000,
B11111000,
B00111000,
B00011000};

byte F5[] = {
B00110001,
B00110001,
B00110000,
B00110000,
B10110000,
B11110000,
B01110001,
B00110001};

byte F6[] = {
B01100011,
B01100011,
B01100000,
B01100000,
B01100000,
B11100000,
B11100011,
B01100011};

byte F7[] = {
B11000111,
B11000111,
B11000001,
B11000001,
B11000001,
B11000001,
B11000111,
B11000111};

byte F8[] = {
B10001111,
B10001111,
B10000011,
B10000011,
B10000011,
B10000011,
B10001111,
B10001111};

byte F9[] = {
B00011111,
B00011111,
B00000110,
B00000110,
B00000110,
B00000110,
B00011111,
B00011111};

byte F10[] = {
B00111111,
B00111111,
B00001100,
B00001100,
B00001100,
B00001100,
B00111111,
B00111111};

byte F11[] = {
B01111110,
B01111110,
B00011000,
B00011000,
B00011000,
B00011000,
B01111110,
B01111110};

byte F12[] = {
B11111100,
B11111100,
B00110000,
B00110000,
B00110000,
B00110000,
B11111100,
B11111100};

byte F13[] = {
B11111000,
B11111000,
B01100000,
B01100000,
B01100000,
B01100000,
B11111000,
B11111000};

byte F14[] = {
B11110001,
B11110001,
B11000000,
B11000000,
B11000000,
B11000001,
B11110001,
B11110001};

byte F15[] = {
B11100011,
B11100011,
B10000000,
B10000000,
B10000001,
B10000011,
B11100011,
B11100011};

byte F16[] = {
B11000111,
B11000111,
B00000000,
B00000001,
B00000011,
B00000111,
B11000111,
B11000111};

byte F17[] = {
B10001111,
B10001111,
B00000001,
B00000011,
B00000111,
B00001110,
B10001111,
B10001111};

byte F18[] = {
B00011111,
B00011111,
B00000011,
B00000111,
B00001110,
B00011100,
B00011111,
B00011111};

byte F19[] = {
B00111111,
B00111111,
B00000111,
B00001110,
B00011100,
B00111000,
B00111111,
B00111111};

byte F20[] = {
B01111110,
B01111110,
B00001110,
B00011100,
B00111000,
B01110000,
B01111110,
B01111110};

byte LINE[] = {
B00000000,
B00000000,
B00000000,
B11111111,
B11111111,
B00000000,
B00000000,
B00000000};

byte BLANK[] = {
B00000000,
B00000000,
B00000000,
B00000000,
B00000000,
B00000000,
B00000000,
B00000000};

byte SMILE[] = {
B00111100,
B01000010,
B10100101,
B10000001,
B10100101,
B10011001,
B01000010,
B00111100};

byte HEART[] = {
B00000000,
B01100110,
B11111111,
B11111111,
B01111110,
B00111100,
B00011000,
B00000000};

byte HEART1[] = {
B01100110,
B11111111,
B11111111,
B01111110,
B00111100,
B00011000,
B00000000,
B00000000};

byte HEART2[] = {
B00000000,
B00000000,
B01100110,
B11111111,
B11111111,
B01111110,
B00111100,
B00011000};



byte ROBOT[] = {
B11111111,
B10000001,
B10100101,
B10100101,
B10000001,
B10111101,
B10000001,
B11111111};

byte NO[] = {
B00111100,
B01111110,
B11000111,
B11001011,
B11010011,
B11100011,
B01111110,
B00111100};

byte AI[] = {
B11111111,
B11111111,
B11000011,
B11111111,
B11111111,
B11000000,
B11000000,
B11000000};

byte QMARK[] = {
B00011000,
B00100100,
B00100100,
B00001000,
B00010000,
B00010000,
B00000000,
B00010000};

byte ARROW[] = {
B00111000,
B00011100,
B00001110,
B11111111,
B11111111,
B00001110,
B00011100,
B00111000};

byte ROUND[] = {
B11111111,
B10000001,
B10111101,
B10100101,
B10100101,
B10101101,
B10100001,
B10111111};


byte random1[] = {
B01010101,
B10101010,
B01010101,
B10101010,
B01010101,
B10101010,
B01010101,
B10101010};

byte random2[] = {
B10101010,
B01010101,
B10101010,
B01010101,
B10101010,
B01010101,
B10101010,
B01010101};


const int columnPins[] = { 6, 12, 13, 3, 15, 4, 8, 9};
const int rowPins[] = { 14,11,16,10,5,17,7,2};
//{ 2,7,17,5,10,16,11,14}

void setup() {
for (int i = 0; i < 8; i++)
{
pinMode(rowPins[i], OUTPUT); // make all the LED pins outputs
pinMode(columnPins[i], OUTPUT);
digitalWrite(columnPins[i], LOW); // disconnect column pins from Ground
}
}

void loop()
{
int Delay = 800 ; 

randomeffect();
{
show(X1, 40);
show(X2, 40);
show(X3, 40);
show(X4, 40); 
show(X5, 40);
show(X6, 40);
show(X7, 40);
show(X8, 40);
show(X9, 40);
show(X10, 40);
show(X11, 40); 
show(X12, 40); 
show(X13, 40); 
show(X14, 40); 
show(X15, 40); 
show(X16, 40); 
show(X17, 40);
show(X18, 40); 
show(X19, 40);
show(X20, 40);
show(X21, 40);
}

{
show(F1, 80);
show(F2, 80);
show(F3, 80);
show(F4, 80); 
show(F5, 80);
show(F6, 80);
show(F7, 80);
show(F8, 80);
show(F9, 80);
show(F10, 80);
show(F11, 80); 
show(F12, 80); 
show(F13, 80); 
show(F14, 80); 
show(F15, 80); 
show(F16, 80); 
show(F17, 80);
show(F18, 80); 
show(F19, 80);
show(F20, 800);
}

randomeffect();
show(SMILE, 800);

randomeffect();
show(HEART, 200);
show(HEART1, 200);
show(HEART, 200);
show(HEART2, 200);
show(HEART, 200);
show(HEART1, 200);
show(HEART, 200);
show(HEART2, 200);
show(HEART, 800);

randomeffect();
show(ROBOT, 800);

randomeffect();
show(NO, 800);

randomeffect();
show(AI, 800);

randomeffect();
show(QMARK, 800);

randomeffect();
show(ARROW, 800);

randomeffect();
show(ROUND, 800);


//delay(Delay); 
}


void randomeffect()
{
  for(int a=0;a<2;a++)
{
show(random1,30);
delay(40);
show(random2,30);
delay(40);
}
}



void show( byte * image, unsigned long duration)
{
unsigned long start = millis(); 
while (start + duration > millis()) 
{
for(int row = 0; row < 8; row++)
{
digitalWrite(rowPins[row], LOW); // Ground the rows
for(int column = 0; column < 8; column++)
{
boolean pixel = bitRead(image[row],column);
if(pixel == 1)
{
digitalWrite(columnPins[column], HIGH); // power up the columns
}
delayMicroseconds(300); // a small delay for each LED
digitalWrite(columnPins[column], LOW); // Ground the columns
}
digitalWrite(rowPins[row], HIGH); // disconnect LEDs
}
}
}
